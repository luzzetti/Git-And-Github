# GIT TAGS #

Solitamente, usiamo i tag per identificare le differenti release di un progetto.
(Semantic Versioning)

Ma fondamentalmente, possiamo usarli per identificare dei momaneit particolarmente importanti nella storia di un progetto, e delle sue commit.

In pratica, è come aggiungere una Sticky-Note ad una particolare commit.

Abbiamo fondamentalmente due tipi di tags:
- Lightweight       (Semplici tag)
- Annotated Tags    (Tag con metadata aggiuntiva, come commenti, data, ecc...)


### DIGRESSIONE sul Semantic Versioning ###

Solitamente, gli si danno tre numeri nel formato:
X.Y.Z
Major.Minor.Patch

La release iniziale, è solitamente la 1.0.0

Patch -> Non contengono nuove feature o breaking changes. Solitamente sono riservate alle Path/HotFix/BugFix
Minor -> New features, nuove funzionalità, ma VIENE MANTENUTA LA RETROCOMPATIBILITA'.
        (Idealmente, non obblighi chi le usa a riscrivere il codice)
        Una volta aumentato il numero della minor, si tende a RESETTARE il Patch number.
Major -> Significant changes, breaking changes, retrocompatibilità non mantenuta

*Fine Digressione*

## Search & Filter ##

Il comando:
git tag
ci mostra la lista dei tags effettuati sul repo in cui ci troviamo

possiamo filtrare alcuni tag con le classiche regex, con il comando:
git tag -l "*beta*"


## Spostarci su un TAG ##
Teniamo bene a mente che i tag, nella maggior parte dei casi, si riferiscono a delle specifiche commit passate, di conseguenza, sponsandoci su un TAG, ci ritroveremo in DETACHED HEAD.

git checkout <TagName>

Trovandoci in detached head, possiamo fare le solite cose. Guardare, fare qualche modifica e creare un branch, diffare tra due tag, e così via.

## Creare Tags ##

Ok, ricordiamoci che ci sono due tipi di tag, come detto gia in precedenza.
- Lightweight
- Annotated

*Lightweight*
git tag <nomeDelTag>

Con questo comando, git creerà un tag che si riferisce alla commit che STA VENENDO ATTUALMENTE PUNTATA DALL'HEAD del branch su cui ci troviamo.


*Annotated*
Per creare dei tag annotati, dobbiamo aggiungere il flag -a 
git tag -a 1.0.1 
(Si aprirà il solito editor per l'inserimento di altre info, compreso il messaggio)

Altrimenti, come per le commit, possiamo aggiungere il flag -m per aggiungere il messaggio tutto nella stessa linea.

git tag -a 1.0.2 -m "Tag tecnico con commento senza l'apertura dell'editor"

Tutto molto bello, ma se lancio il comando: "git tag", lui comunque mi mostra la lista, senza farmi vedere il messaggio o le informazioni aggiuntive relative a quel tag.

Per vederle, devo usare il comando:

git show <nomeDelTag>

$ git show 1.0.1
tag 1.0.1
Tagger: Christian <christian.luzzetti@gmail.com>
Date:   Sun May 23 18:36:37 2021 +0200

Tag annotato. Vengono aggiunte più meta-informazioni, oltre a questo messaggio.

commit efda31ff997aca3c889b6b102ac717f8a07770a2 (HEAD -> master, tag: 1.0.1)
Author: Christian <christian.luzzetti@gmail.com>
Date:   Sun May 23 18:36:32 2021 +0200

    Test di creazione di un tag annotato

diff --git a/Git Basics/031 - Git Tags.txt b/Git Basics/031 - Git Tags.txt
index ac87dbe..c511598 100644
--- a/Git Basics/031 - Git Tags.txt
+++ b/Git Basics/031 - Git Tags.txt
@@ -57,3 +57,6 @@ git tag <nomeDelTag>
 Con questo comando, git creerà un tag che si riferisce alla commit che STA VENENDO ATTUALMENTE PUNTATA DALL'HEAD del branch su cui ci troviamo.

+*Annotated*
+Per creare dei tag annotati, dobbiamo aggiungere il flag -a 
+git tag -a 1.0.1 
\ No newline at end of file


 Perfetto!


 Un'ultima informazione importante, è la possibilità di andare a taggare una vecchia commit!
Posso farlo sempre con il solito comando:

git tag <nomeDelTag> <hashDellaCommitDaTaggare>
(Posso fare un tag Annotato o Lightweight, usando o meno il tag -a)


## Spostare un tag ##
Se per qualche motivo ci sbagliamo e tagghiamo la commit sbagliata, vogliamo poter taggare la commit corretta, ma GIT si incazza se usiamo lo stesso nome per due tag.

Quindi, devo avere la possibilità di prendere un tag, e spostarlo su un'altra commit.

Posso farlo, usando il flag -f
git tag <nomeTagDaSpostare> <hashDellaCommitDaTaggare> -f

$ git tag 1.0.1 fba43ff -f
Updated tag '1.0.1' (was 44926e0)


## Eliminare un tag ##
Infine, potremmo ovviamente aver bisogno di eliminare un tag (a seguito di un errore).

Possiamo farlo, con il flag -d per Delete.

$ git tag -d 1.0.2
Deleted tag '1.0.2' (was fba43ff)

Easy peasy lemon squeezy.


## Ultima info IMPORTANTE ##
Di default, quando effettuo il push su un repository, I TAG NON VENGONO PUSHATI.

Per farglielo fare, ho due opzioni.
- Pushare solamente uno specifico tag
- Pushare tutti i tag che ho fatto in locale

I comandi sono, relativamente:
git push <nomeRemote> <nomeDelTagDaPushare>

$ git push origin 1.0.0
Total 0 (delta 0), reused 0 (delta 0), pack-reused 0
To https://github.com/luzzetti/Git-And-Github.git
 * [new tag]         1.0.0 -> 1.0.0


Oppure, per pusharli tutti:
git push <nomeRemote> --tags 

$ git push origin --tags
Total 0 (delta 0), reused 0 (delta 0), pack-reused 0
To https://github.com/luzzetti/Git-And-Github.git
 * [new tag]         1.0.1 -> 1.0.1