# GIT STASH

Mettiamo che mi trovo su un branch, ed ho un file (o un fottio), che ho modificato, ma che non ho committato.
Ora, per qualche motivo (Rapidissimo bugfix? Fare un pacchetto?) devo spostarmi al volo sul trunk.

Che succede se mi ci sposto senza aver prima committato i file modificati?

1. Quei cambi mi seguono sul branch di destinazione. (Ahia...)
2. Git non mi fa switchare se nota dei conflitti. (Ahi...)

e quindi?
E QUINDI?
Ok, tipo, ora mi trovo sul branch, e questa modifica non è ancora stata committata.
Non è nemmeno completata, quindi non mi sentirei bene con me stesso nel committarla.
Però, mi dicono che devo andare al volo sul trunk per creare un pacchetto...

se switcho al master, MI PORTO DIETRO QUESTE MODIFICHE, e questo non è bello.

Questo, è il caso in cui GIT STASH mi viene in soccorso.

Il comando git stash, prende tutte le modifiche NON COMMITTATE (Staged e non), le nasconde da qualche parte, e fa il revert della working copy. (Dopo, potremo riprendere le modifiche).

Più tardi, potremo fare GIT STASH POP per rimuovere le modifiche dallo stash, e rimetterle nella working copy.

Alcuni comandi secondari, possono essere, ad esempio:
git stash apply

fa la stessa cosa del git stash pop, PERO'...non elimina il codice dallo stash.
Quindi, se per esempio voglio stashare un pezzo di codice, ed applicarlo su branch multipli, posso fare:
git stash apply
poi spostarmi su qualche altro branch con git switch <nomeDelbranch>
e dare nuovamente git stash apply, oppure git stash pop.


# STASH MULTIPLE #
Un'altra cosa che può capitare, è che io faccia delle stash multiple. No bueno.
per vedere una lista di robe che ho nello stash, posso usare
git stash list

ovviamente se eseguo git stash pop, mi da l'ultima, perché, beh, è uno stack.

posso però eseguire:
git stash pop stash@{2}

e così, ad esempio, riapplicherò la modifica messa nello stash con indice 2, che posso vedere dalla lista di stash.

Non mi servirà mai, spero, ma è buono saperlo.

# DELETE #
Ok, mettiamo che ho roba nello stash, e decido di toglierla senza popparla.
(O se uso apply, ma poi mi rendo conto di dover togliere roba dallo stash)

posso usare il comando:

$ git stash list
stash@{0}: WIP on master: a1717d8 lavorare con stash multiple

per vedere quali stash ho nella lista.
Dopodiché posso eliminare un preciso stash, chiamando:

git stash drop stash@{0}

oppure
git stash clear
se voglio pulirli tutti