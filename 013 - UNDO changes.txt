# UNDO CHANGES #
Ok, finalmente è arrivato il momento di diventare adulti, ed imparare come tornare indietro senza fuckuppare tutto.

git checkout <commitHASH>

Mi da uno spool abbastanza intimidatorio:
------------------------------------------------------------
git checkout ff7e27d
Note: switching to 'ff7e27d'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by switching back to a branch.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -c with the switch command. Example:

  git switch -c <new-branch-name>

Or undo this operation with:

  git switch -

Turn off this advice by setting config variable advice.detachedHead to false

HEAD is now at ff7e27d edited git stash
------------------------------------------------------------


Ok, ammettendo di sapere cosa significa essere in Detached Head mode, vediamo innanzitutto come attaccarla nuovamente, così, tanto per evitare di imputtanare tutto.
è molto semplice, basta switchare nuovamente al branch su cui vogliamo andare. (O quello su cui ci troviamo, per tornare in uno stato normale)

git switch master

et voilà.


Ok, abbiamo imparato come tornare indietro nel tempo, dare un'occhiata, e ritornare al presente.
Ma posso fare molto di più!

Posso tornare indietro, e creare un nuovo branch a partire da quel preciso punto nel tempo!

git checkout <hashVecchiaCommit>
git switch -c nuovoBranch
Ok, ho creato un nuovo branch, e ci ho committato roba sopra.
poi con switch master, sono ritornato quì.
Ma quel branch esiste...

------------------------------------------------

Ok, un'altra roba abbastanza inutile, è tornare indietro di X commits, relativamente alla HEAD.
Semplice, facile, non vedo l'utilità ma ok.

git checkout HEAD~1
Torno indietro di una commit.
git checkout HEAD~4
torno indietro di 4 commit.

E così via.